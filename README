# this is the first version
This project is to turn a Raspberry PI as an audio device. The device is able to do 2 functions: as a sound collector and as a test-tone generator.

Table of Content

	1. Configuration Instructions
	2. Installation Instructions
	3. Operating Instructions
	4. File list (Manifest)
	5. Copyright / Copyleft
	6. Contact Information
	7. Credits and Acknowledgements

1. Configuration Instructions

The application is running on a Raspberry PI 3 model B. This PI should come with a USB sound card, a network connection and a microphone.

1.1 Configure USB sound card as default audio device

The Raspberry PI sound card does NOT have a microphone interface. Therefore, the user have to change the default audio device to be an USB sound card.
	a. Turn ON your Raspberry PI and apply the USB sound card. Type "lsusb" command (without the "") to check if your USB sound card is mounted.
	b. Type "sudo nano /etc/asound.conf" (without the "") command and put following content to the file:
	pcm.!default {
		type plug
		slave {
			pcm "hm:1,0"
		}
	}
	ctl.!default {
		type hw
		card 1
	}
	c. Go to your home directory (type "$ cd"). Once there, type "nano .asoundrc" command and put the same content from step b. to the file
	d. Type "alsamixer", you should be able to see the USB sound card inserted as the default audio device. For a more sensitive sound detection, it is better to maximize the volume of "Mic" by navigating with your keyboard arrows.

1.2 Fix the Bug of arecord

The newest version of Raspbian (a.k.a. Jessie) comes with a new version of alsa-utils (1.0.28), which has a bug while recording: it doesn.t stop even a '.duration' switch is given, and generates lots of useless audio files.
To fix this problem, we have to downgrade alsa-util to an earlier version (1.0.25).
	a. Type "sudo nano /etc/apt/sources.list" command and add this to the last line:
		deb http://mirrordirector.raspbian.org/raspbian/ wheezy main contrib non-free rpi
	b. Type "sudo apt-get update"
	c. Type "sudo aptitude versions alsa-utils" to check if version 1.0.25 of alsa-util is available.
	d. Type "sudo apt-get install alsa-utils=1.0.25-4" to downgrade.
	e. Reboot (if necessary)
	f. Type "arecord -r44100 -c1 -f S16_LE -d5 test.wav" to test that your microphone is working. You should see a "test.wav" file in the current folder ( to list the files use the command "ls" ).
	g. Use an earphone on the USB sound card. Run "aplay test.wav" to check that your recording is okay.

1.3 Install Libcurl library

In order to use this application, the user needs to install the libcurl library.
	a. Use the command "ls /usr/include/curl" or "ls /usr/include/arm-linux-gnueabihf/curl" to identify that libcurl library is installed.
	b. If the folder does NOT exist, run "sudo apt-get update" to update the application list.
	c. Type "sudo apt-get install libcurl3" to install the libcurl3.
	d. Type "sudo apt-get install libcurl4-openssl-dev" to install the development API of libcurl4.

2. Installation Instructions

Once the Raspberry PI is succesfully configured, proceed to the installation steps.
	a. Copy the source code to your Raspberry PI by using the command "git clone https://github.com/MuSuareZ/appdev".
	b. Make sure you have all the files succesfully copied to your directory (Check chapter 4. to ensure you have 11 files).

3. Operating Instructions

Once you have succesfully completed the configuration and installation steps (step 1. and 2.), you may proceed to the operating steps.
	a. Firstly, you have to compile the files by typing "make".
	b. Once this is done, if you list your files ("ls") you should be able to see that new files were created, such as *.o files and sound.out.
	c. Now you have to decide if you want to use the sound collector or tone generator:
		c.1 Sound collector - In order to use this feature, you must run sound.out by typing "./sound.out"
			Once inside the program, the user will see some important information on the top of the screen such as "file name/sample rate/number of peaks/duration"
			On the bottom, the user should see the bars representing the sound of his microphone.
			In case your bars are NOT working properly, you can either move to step 3.1 Debugging if you consider yourself an advanced user or step 6 for contacting me.
			Keep in mind that the user can stop the program at any time by pressing CTRL+C
			It is also a good idea to clear the screen after stopping the program by typing "clear" command.
		c.2 Tone generator - In order to use this feature, you must run sound.out by typing "./sound.out 440"
			Please keep in mind that 440 is just a suggestion to test your program! The user is able to pick any frequency from 30db to 16000db (audible frequency).
			Once the program is running, the user is able to choose if his audio will be mono or stereo(1 for mono, 2 for stereo).
			Then, the user may choose the duration of the tone(from 1 second to 10 seconds).
			After that, the user will receive a message informing that the tone was generated.
			Once the tone is generated, the user may list his files ("ls") and verify that a testTone.wav was created.
			In order to hear the generated tone, the user may connect a headphone to the Raspberry PI and type "aplay testTone.wav".
			
3.1 Debugging (Advanced Users Only)

Please take note that these steps require a certain knowledge of programming and careful execution since the user will modify the source code lines.
In case you need precise information for example the exact frequency value, this debugging can provide you that in order to fix a problem or report
the problem to me.
	a. Type "nano sound.h" to access the sound.h file and its code lines.
	b. Once inside the code lines, you must uncomment the line "//#define DEBUG" by removing the "//" and save your file.
		//#define DEBUG --> #define DEBUG
	c. Type "make clean" to remove the files with the old configurations and type "make" to rebuild it.
	d. Type "./sound.out" and you will see all the frequency values that the user's microphone is capturing.
	e. In order to bring the sound bars back, the user just need to comment that line again and repeat the building steps (make clean -> make).

4. File List (Manifest)

	a. README
	b. comm.c
	c. comm.h
	d. curltest.c
	e. main.c
	f. makefile
	g. screen.c
	h. screen.h
	i. sound.c
	j. sound.h
	k. sound.php

5. Copyright

This project is protected by copyright, it is free of charge, open source to the public and its use is ONLY for studying purposes. It is totally FORBIDDEN to sell or share this product without the proper permission and given credits.
All rights reserved to Murillo Suarez Figueiredo Nunes - 2019.

6. Contact Information

If you have any problems concerning the configuration, installation, bugs or doubts, please send me an email to "murillo.finlandia@gmail.com" with the subject "APPDEV".

7. Credits and Aknowledgements

I would like to thank my teacher for all the orientations and lessons given during the design and execution of this project.
Teacher and responsible for orienting the project Dr. Gao Chao.
Student and responsible for executing the project Murillo Suarez Figueiredo Nunes.
